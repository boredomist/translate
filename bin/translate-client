#!/usr/bin/env python

from __future__ import print_function

import translate
import translate.app.defaultsettings
import translate.client
import translate.client.exceptions

import logging
import argparse
import os
import sys
from datetime import datetime


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Command line interface to \
translation server')

    parser.add_argument('--debug', dest='debug', help='Whether or not to print \
    out debugging information', default=False, action='store_true')

    parser.add_argument('--host', dest='host', help='Translate server host to \
use. If not specified, the environment variable TRANSLATE_HOST will be used. \
If that is also unavailable, then the client will default to using "localhost".')

    parser.add_argument('--port', dest='port', help='Port the translate server \
is on. If not provided, the port will be obtained from environment variable \
TRANSLATE_PORT. If that is unavailable the default port that translate uses \
(5000) will be used.')

    parser.add_argument('-l', '--list-pairs', dest='list_pairs',
                        action='store_true',
                        help='List the available language pairs and quit')

    parser.add_argument('-i', '--info', dest='info', action='store_true',
                        help='Show information about the server and exit')

    parser.add_argument('language_pair', type=str, help='Language pair (in \
src-dst format) for the languages to translate between. e.g. en-es', nargs='?')

    parser.add_argument('text', type=str, nargs="*", help='Text to translate \
between specify languages. If no arguments are specified here, text will be \
read from STDIN, so that piping can be used.')

    args = parser.parse_args()

    host = args.host
    port = args.port

    if host is None:
        host = os.environ.get('TRANSLATE_HOST', 'localhost')

    if port is None:
        defaultport = translate.app.defaultsettings.SERVER['port']
        port = os.environ.get('TRANSLATE_PORT', defaultport)

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)

    client = translate.client.Client(host=host, port=port, timeout=10)

    try:
        if args.list_pairs:
            for pair in client.language_pairs():
                print("{0}-{1}".format(pair[0], pair[1]))

            sys.exit(0)

        if args.info:
            info = client.info(refresh=True)

            print("Translate server at %s:" % client.host)

            print("  API URL:\t%s" % client.base_url)

            if info['sizelimit']:
                print("  Size limit:\t%d bytes" % info['sizelimit'])
            else:
                print("  Size limit:\tNone")

            if info['ratelimit']:
                print("  Rate limit:\t%d reqs / %d seconds" %
                      (info['ratelimit']['limit'], info['ratelimit']['per']))

                timestamp = datetime.fromtimestamp(info['ratelimit']['reset'])

                print("    resets at:\t%s" %
                      timestamp.strftime('%Y-%m-%d %H:%M:%S'))
            else:
                print("  Rate limit:\tNone")


            print("  Supported backends:")

            for name in info['backends']:
                back = info['backends'][name]

                print("""    %s:
      %s
      Preference:  %d""" % (name, back['description'], back['preference']  ))

            sys.exit(0)

        if args.language_pair is None:
            parser.error("need to specify a language pair to translate")

        pair = args.language_pair.split('-')

        if not client.can_translate(pair[0], pair[1]):
            print("Invalid language pair: {0}-{1}".format(pair[0], pair[1]),
                  file=sys.stderr)
            sys.exit(1)

        for text in args.text:
            print(client.translate(text, pair[0], pair[1]))

        # If no text was specified in args, drop to STDIN
        if len(args.text) == 0:
            lines = '\n'.join(sys.stdin.readlines())

            print(client.translate(lines, pair[0], pair[1]))

    except translate.client.exceptions.TranslateException as exc:
        print("Error: " + str(exc), file=sys.stderr)
